# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'interface.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import operations


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(820, 600)
        MainWindow.setStyleSheet("background-color: rgb(77, 118, 80);\n"
"\n"
"Qlabel\n"
"{\n"
"color: rgb(255, 255, 255);\n"
"}\n"
"")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.tabWidget.setFont(font)
        self.tabWidget.setStyleSheet("QTabWidget\n"
"{\n"
"    background-color: rgb(77, 118, 80);\n"
"    min-width: 80px;\n"
"}\n"
"QTabWidget::pane\n"
"{\n"
"    border: 1px;\n"
"    background-color: rgb(77, 118, 80);\n"
"}\n"
"QTabBar::tab\n"
"{\n"
"    background-color: rgb(116, 177, 120);\n"
"    min-width: 30ex;\n"
"    min-height: 6ex;\n"
"    margin-left: 1px;\n"
"    left: -1px;\n"
"    color: rgb(255, 255, 255);\n"
"}\n"
"QTabBar::tab:selected\n"
"{\n"
"    background-color: rgb(77, 118, 80);\n"
"\n"
"}\n"
"QTabBar::tab:hover\n"
"{\n"
"    \n"
"    background-color: rgb(107, 163, 110);\n"
"}\n"
"")
        self.tabWidget.setObjectName("tabWidget")
        self.range_charact = QtWidgets.QWidget()
        self.range_charact.setStyleSheet("Qlabel{\n"
"    сolor: rgb(255, 255, 255);\n"
"    background-сolor: rgb(190, 145, 92);\n"
"}")
        self.range_charact.setObjectName("range_charact")
        self.title = QtWidgets.QLabel(self.range_charact)
        self.title.setGeometry(QtCore.QRect(0, 20, 800, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        font.setStrikeOut(False)
        font.setKerning(False)
        self.title.setFont(font)
        self.title.setStyleSheet("color: rgb(255, 255, 255);\n"
"")
        self.title.setAlignment(QtCore.Qt.AlignCenter)
        self.title.setObjectName("title")
        self.input_words = QtWidgets.QLabel(self.range_charact)
        self.input_words.setGeometry(QtCore.QRect(0, 60, 800, 15))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        font.setKerning(False)
        self.input_words.setFont(font)
        self.input_words.setStyleSheet("color: rgb(255, 255, 255);\n"
"")
        self.input_words.setAlignment(QtCore.Qt.AlignCenter)
        self.input_words.setObjectName("input_words")
        self.input_box = QtWidgets.QPlainTextEdit(self.range_charact)
        self.input_box.setGeometry(QtCore.QRect(150, 100, 500, 50))
        font = QtGui.QFont()
        font.setKerning(False)
        self.input_box.setFont(font)
        self.input_box.setMouseTracking(True)
        self.input_box.setStyleSheet("background-color: rgb(94, 144, 97);\n"
"color: rgb(255, 255, 255);\n"
"gridline-color: rgb(255, 255, 255);")
        self.input_box.setObjectName("input_box")
        self.range = QtWidgets.QLabel(self.range_charact)
        self.range.setGeometry(QtCore.QRect(0, 170, 400, 15))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.range.setFont(font)
        self.range.setStyleSheet("color: rgb(255, 255, 255);")
        self.range.setAlignment(QtCore.Qt.AlignCenter)
        self.range.setObjectName("range")
        self.interval_range = QtWidgets.QLabel(self.range_charact)
        self.interval_range.setGeometry(QtCore.QRect(400, 170, 400, 15))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.interval_range.setFont(font)
        self.interval_range.setStyleSheet("color: rgb(255, 255, 255);")
        self.interval_range.setAlignment(QtCore.Qt.AlignCenter)
        self.interval_range.setObjectName("interval_range")
        self.interval_check_box = QtWidgets.QScrollArea(self.range_charact)
        self.interval_check_box.setGeometry(QtCore.QRect(410, 205, 370, 60))
        self.interval_check_box.setWidgetResizable(True)
        self.interval_check_box.setObjectName("interval_check_box")
        self.interval_box_Widget = QtWidgets.QWidget()
        self.interval_box_Widget.setGeometry(QtCore.QRect(0, 0, 675, 174))
        self.interval_box_Widget.setStyleSheet("color: rgb(255, 255, 255);\n"
"")
        self.interval_box_Widget.setObjectName("interval_box_Widget")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.interval_box_Widget)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.discrete_variation_series_interval = QtWidgets.QCheckBox(self.interval_box_Widget)
        self.discrete_variation_series_interval.setObjectName("discrete_variation_series_interval")
        self.gridLayout_3.addWidget(self.discrete_variation_series_interval, 1, 1, 1, 1)
        self.plot_empirical_distribution_function_interval = QtWidgets.QCheckBox(self.interval_box_Widget)
        self.plot_empirical_distribution_function_interval.setObjectName("plot_empirical_distribution_function_interval")
        self.gridLayout_3.addWidget(self.plot_empirical_distribution_function_interval, 2, 1, 1, 1)
        self.mean_interval = QtWidgets.QCheckBox(self.interval_box_Widget)
        self.mean_interval.setObjectName("mean_interval")
        self.gridLayout_3.addWidget(self.mean_interval, 5, 0, 1, 1)
        self.sample_standard_deviation_interval = QtWidgets.QCheckBox(self.interval_box_Widget)
        self.sample_standard_deviation_interval.setObjectName("sample_standard_deviation_interval")
        self.gridLayout_3.addWidget(self.sample_standard_deviation_interval, 2, 0, 1, 1)
        self.relative_frequency_distribution_series_interval = QtWidgets.QCheckBox(self.interval_box_Widget)
        self.relative_frequency_distribution_series_interval.setObjectName("relative_frequency_distribution_series_interval")
        self.gridLayout_3.addWidget(self.relative_frequency_distribution_series_interval, 0, 1, 1, 1)
        self.sample_mean_interval = QtWidgets.QCheckBox(self.interval_box_Widget)
        self.sample_mean_interval.setObjectName("sample_mean_interval")
        self.gridLayout_3.addWidget(self.sample_mean_interval, 1, 0, 1, 1)
        self.correct_variance_interval = QtWidgets.QCheckBox(self.interval_box_Widget)
        self.correct_variance_interval.setObjectName("correct_variance_interval")
        self.gridLayout_3.addWidget(self.correct_variance_interval, 3, 0, 1, 1)
        self.var_k_interval = QtWidgets.QCheckBox(self.interval_box_Widget)
        self.var_k_interval.setObjectName("var_k_interval")
        self.gridLayout_3.addWidget(self.var_k_interval, 4, 1, 1, 1)
        self.moda_interval = QtWidgets.QCheckBox(self.interval_box_Widget)
        self.moda_interval.setObjectName("moda_interval")
        self.gridLayout_3.addWidget(self.moda_interval, 4, 0, 1, 1)
        self.dispersion_interval = QtWidgets.QCheckBox(self.interval_box_Widget)
        self.dispersion_interval.setObjectName("dispersion_interval")
        self.gridLayout_3.addWidget(self.dispersion_interval, 0, 0, 1, 1)
        self.empirical_distribution_function_interval = QtWidgets.QCheckBox(self.interval_box_Widget)
        self.empirical_distribution_function_interval.setObjectName("empirical_distribution_function_interval")
        self.gridLayout_3.addWidget(self.empirical_distribution_function_interval, 3, 1, 1, 1)
        self.frequency_polygon_interval = QtWidgets.QCheckBox(self.interval_box_Widget)
        self.frequency_polygon_interval.setObjectName("frequency_polygon_interval")
        self.gridLayout_3.addWidget(self.frequency_polygon_interval, 5, 1, 1, 1)
        self.interval_check_box.setWidget(self.interval_box_Widget)
        self.range_check_box = QtWidgets.QScrollArea(self.range_charact)
        self.range_check_box.setGeometry(QtCore.QRect(20, 205, 370, 60))
        self.range_check_box.setWidgetResizable(True)
        self.range_check_box.setObjectName("range_check_box")
        self.range_check_box_widget = QtWidgets.QWidget()
        self.range_check_box_widget.setGeometry(QtCore.QRect(0, 0, 675, 174))
        self.range_check_box_widget.setStyleSheet("color: rgb(255, 255, 255);")
        self.range_check_box_widget.setObjectName("range_check_box_widget")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.range_check_box_widget)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.discrete_variation_series = QtWidgets.QCheckBox(self.range_check_box_widget)
        self.discrete_variation_series.setObjectName("discrete_variation_series")
        self.gridLayout_4.addWidget(self.discrete_variation_series, 1, 1, 1, 1)
        self.correct_variance = QtWidgets.QCheckBox(self.range_check_box_widget)
        self.correct_variance.setObjectName("correct_variance")
        self.gridLayout_4.addWidget(self.correct_variance, 3, 0, 1, 1)
        self.var_k = QtWidgets.QCheckBox(self.range_check_box_widget)
        self.var_k.setObjectName("var_k")
        self.gridLayout_4.addWidget(self.var_k, 4, 1, 1, 1)
        self.moda = QtWidgets.QCheckBox(self.range_check_box_widget)
        self.moda.setObjectName("moda")
        self.gridLayout_4.addWidget(self.moda, 4, 0, 1, 1)
        self.empirical_distribution_function = QtWidgets.QCheckBox(self.range_check_box_widget)
        self.empirical_distribution_function.setObjectName("empirical_distribution_function")
        self.gridLayout_4.addWidget(self.empirical_distribution_function, 3, 1, 1, 1)
        self.variance = QtWidgets.QCheckBox(self.range_check_box_widget)
        self.variance.setObjectName("variance")
        self.gridLayout_4.addWidget(self.variance, 0, 0, 1, 1)
        self.frequency_polygon = QtWidgets.QCheckBox(self.range_check_box_widget)
        self.frequency_polygon.setObjectName("frequency_polygon")
        self.gridLayout_4.addWidget(self.frequency_polygon, 5, 1, 1, 1)
        self.plot_empirical_distribution_function = QtWidgets.QCheckBox(self.range_check_box_widget)
        self.plot_empirical_distribution_function.setObjectName("plot_empirical_distribution_function")
        self.gridLayout_4.addWidget(self.plot_empirical_distribution_function, 2, 1, 1, 1)
        self.mean = QtWidgets.QCheckBox(self.range_check_box_widget)
        self.mean.setObjectName("mean")
        self.gridLayout_4.addWidget(self.mean, 5, 0, 1, 1)
        self.relative_frequency_distribution_series = QtWidgets.QCheckBox(self.range_check_box_widget)
        self.relative_frequency_distribution_series.setObjectName("relative_frequency_distribution_series")
        self.gridLayout_4.addWidget(self.relative_frequency_distribution_series, 0, 1, 1, 1)
        self.sample_standard_deviation = QtWidgets.QCheckBox(self.range_check_box_widget)
        self.sample_standard_deviation.setObjectName("sample_standard_deviation")
        self.gridLayout_4.addWidget(self.sample_standard_deviation, 2, 0, 1, 1)
        self.sample_mean = QtWidgets.QCheckBox(self.range_check_box_widget)
        self.sample_mean.setObjectName("sample_mean")
        self.gridLayout_4.addWidget(self.sample_mean, 1, 0, 1, 1)
        self.range_check_box.setWidget(self.range_check_box_widget)
        self.calc_butt = QtWidgets.QPushButton(self.range_charact)
        self.calc_butt.setGeometry(QtCore.QRect(355, 285, 90, 30))
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.calc_butt.setFont(font)
        self.calc_butt.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.calc_butt.setObjectName("calc_butt")
        self.input_words.raise_()
        self.input_box.raise_()
        self.title.raise_()
        self.range.raise_()
        self.interval_range.raise_()
        self.interval_check_box.raise_()
        self.range_check_box.raise_()
        self.calc_butt.raise_()
        self.tabWidget.addTab(self.range_charact, "")
        
        self.confidence_interval = QtWidgets.QWidget()
        self.confidence_interval.setObjectName("confidence_interval")
        self.title_conf_interv = QtWidgets.QLabel(self.confidence_interval)
        self.title_conf_interv.setGeometry(QtCore.QRect(20, 30, 760, 15))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.title_conf_interv.setFont(font)
        self.title_conf_interv.setStyleSheet("color: rgb(255, 255, 255);")
        self.title_conf_interv.setAlignment(QtCore.Qt.AlignCenter)
        self.title_conf_interv.setObjectName("title_conf_interv")
        self.title_gen_mean = QtWidgets.QLabel(self.confidence_interval)
        self.title_gen_mean.setGeometry(QtCore.QRect(20, 65, 760, 15))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.title_gen_mean.setFont(font)
        self.title_gen_mean.setStyleSheet("color: rgb(255, 255, 255);")
        self.title_gen_mean.setAlignment(QtCore.Qt.AlignCenter)
        self.title_gen_mean.setObjectName("title_gen_mean")
        self.otkl_rbut = QtWidgets.QRadioButton(self.confidence_interval)
        self.otkl_rbut.setGeometry(QtCore.QRect(60, 100, 160, 20))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.otkl_rbut.setFont(font)
        self.otkl_rbut.setStyleSheet("color: rgb(255, 255, 255);")
        self.otkl_rbut.setObjectName("otkl_rbut")
        self.corr_var_rbut = QtWidgets.QRadioButton(self.confidence_interval)
        self.corr_var_rbut.setGeometry(QtCore.QRect(240, 100, 160, 20))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.corr_var_rbut.setFont(font)
        self.corr_var_rbut.setStyleSheet("color: rgb(255, 255, 255);")
        self.corr_var_rbut.setObjectName("corr_var_rbut")
       
        self.input_conf_gen_mean = QtWidgets.QTextEdit(self.confidence_interval)
        self.input_conf_gen_mean.setGeometry(QtCore.QRect(60, 165, 60, 30))
        self.input_conf_gen_mean.setObjectName("input_conf_gen_mean")
        self.input_conf_gen_mean.setStyleSheet("background-color: rgb(94, 144, 97);\n"
"color: rgb(255, 255, 255);\n"
"gridline-color: rgb(255, 255, 255);")
        self.input_n_gen_mean = QtWidgets.QTextEdit(self.confidence_interval)
        self.input_n_gen_mean.setGeometry(QtCore.QRect(150, 165, 60, 30))
        self.input_n_gen_mean.setObjectName("input_n_gen_mean")
        self.input_n_gen_mean.setStyleSheet("background-color: rgb(94, 144, 97);\n"
"color: rgb(255, 255, 255);\n"
"gridline-color: rgb(255, 255, 255);")
        self.input_corr_var_otkl_gen_mean = QtWidgets.QTextEdit(self.confidence_interval)
        self.input_corr_var_otkl_gen_mean.setGeometry(QtCore.QRect(240, 165, 60, 30))
        self.input_corr_var_otkl_gen_mean.setObjectName("input_corr_var_otkl_gen_mean")
        self.input_corr_var_otkl_gen_mean.setStyleSheet("background-color: rgb(94, 144, 97);\n"
"color: rgb(255, 255, 255);\n"
"gridline-color: rgb(255, 255, 255);")
        self.input_v_mean_gen_mean = QtWidgets.QTextEdit(self.confidence_interval)
        self.input_v_mean_gen_mean.setGeometry(QtCore.QRect(330, 165, 60, 30))
        self.input_v_mean_gen_mean.setObjectName("input_v_mean_gen_mean")
        self.input_v_mean_gen_mean.setStyleSheet("background-color: rgb(94, 144, 97);\n"
"color: rgb(255, 255, 255);\n"
"gridline-color: rgb(255, 255, 255);")
        self.conf_title = QtWidgets.QLabel(self.confidence_interval)
        self.conf_title.setGeometry(QtCore.QRect(45, 140, 90, 15))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.conf_title.setFont(font)
        self.conf_title.setStyleSheet("color: rgb(255, 255, 255);")
        self.conf_title.setAlignment(QtCore.Qt.AlignCenter)
        self.conf_title.setObjectName("conf_title")
        self.n_title = QtWidgets.QLabel(self.confidence_interval)
        self.n_title.setGeometry(QtCore.QRect(135, 140, 90, 15))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.n_title.setFont(font)
        self.n_title.setStyleSheet("color: rgb(255, 255, 255);")
        self.n_title.setAlignment(QtCore.Qt.AlignCenter)
        self.n_title.setObjectName("n_title")
        self.cor_var_otkl_title = QtWidgets.QLabel(self.confidence_interval)
        self.cor_var_otkl_title.setGeometry(QtCore.QRect(225, 140, 90, 15))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.cor_var_otkl_title.setFont(font)
        self.cor_var_otkl_title.setStyleSheet("color: rgb(255, 255, 255);")
        self.cor_var_otkl_title.setAlignment(QtCore.Qt.AlignCenter)
        self.cor_var_otkl_title.setObjectName("cor_var_otkl_title")
        self.v_mean = QtWidgets.QLabel(self.confidence_interval)
        self.v_mean.setGeometry(QtCore.QRect(315, 140, 90, 15))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.v_mean.setFont(font)
        self.v_mean.setStyleSheet("color: rgb(255, 255, 255);")
        self.v_mean.setAlignment(QtCore.Qt.AlignCenter)
        self.v_mean.setObjectName("v_mean")
        self.ensw_gen_mean = QtWidgets.QLabel(self.confidence_interval)
        self.ensw_gen_mean.setGeometry(QtCore.QRect(60, 215, 180, 15))
        self.ensw_gen_mean.setStyleSheet("color: rgb(255, 255, 255);")
        self.ensw_gen_mean.setObjectName("ensw_gen_mean")
        self.cof_gen_var_otkl_title = QtWidgets.QLabel(self.confidence_interval)
        self.cof_gen_var_otkl_title.setGeometry(QtCore.QRect(20, 250, 760, 15))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.cof_gen_var_otkl_title.setFont(font)
        self.cof_gen_var_otkl_title.setStyleSheet("color: rgb(255, 255, 255);")
        self.cof_gen_var_otkl_title.setAlignment(QtCore.Qt.AlignCenter)
        self.cof_gen_var_otkl_title.setObjectName("cof_gen_var_otkl_title")
        self.gen_var_rbut = QtWidgets.QRadioButton(self.confidence_interval)
        self.gen_var_rbut.setGeometry(QtCore.QRect(60, 285, 160, 20))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.gen_var_rbut.setFont(font)
        self.gen_var_rbut.setStyleSheet("color: rgb(255, 255, 255);")
        self.gen_var_rbut.setObjectName("gen_var_rbut")
        self.stotkl_rbut_gen_var = QtWidgets.QRadioButton(self.confidence_interval)
        self.stotkl_rbut_gen_var.setGeometry(QtCore.QRect(240, 285, 160, 20))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.stotkl_rbut_gen_var.setFont(font)
        self.stotkl_rbut_gen_var.setStyleSheet("color: rgb(255, 255, 255);")
        self.stotkl_rbut_gen_var.setObjectName("stotkl_rbut_gen_var")
        self.conf_title_gen_var = QtWidgets.QLabel(self.confidence_interval)
        self.conf_title_gen_var.setGeometry(QtCore.QRect(45, 320, 90, 15))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.conf_title_gen_var.setFont(font)
        self.conf_title_gen_var.setStyleSheet("color: rgb(255, 255, 255);")
        self.conf_title_gen_var.setAlignment(QtCore.Qt.AlignCenter)
        self.conf_title_gen_var.setObjectName("conf_title_gen_var")
        self.input_conf_gen_var = QtWidgets.QTextEdit(self.confidence_interval)
        self.input_conf_gen_var.setGeometry(QtCore.QRect(60, 345, 60, 30))
        self.input_conf_gen_var.setObjectName("input_conf_gen_var")
        self.input_conf_gen_var.setStyleSheet("background-color: rgb(94, 144, 97);\n"
"color: rgb(255, 255, 255);\n"
"gridline-color: rgb(255, 255, 255);")
        self.n_title_gen_var = QtWidgets.QLabel(self.confidence_interval)
        self.n_title_gen_var.setGeometry(QtCore.QRect(135, 320, 90, 15))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.n_title_gen_var.setFont(font)
        self.n_title_gen_var.setStyleSheet("color: rgb(255, 255, 255);")
        self.n_title_gen_var.setAlignment(QtCore.Qt.AlignCenter)
        self.n_title_gen_var.setObjectName("n_title_gen_var")
        self.input_n_gen_var = QtWidgets.QTextEdit(self.confidence_interval)
        self.input_n_gen_var.setGeometry(QtCore.QRect(150, 345, 60, 30))
        self.input_n_gen_var.setObjectName("input_n_gen_var")
        self.input_n_gen_var.setStyleSheet("background-color: rgb(94, 144, 97);\n"
"color: rgb(255, 255, 255);\n"
"gridline-color: rgb(255, 255, 255);")
        self.crr_var_title_gen_var = QtWidgets.QLabel(self.confidence_interval)
        self.crr_var_title_gen_var.setGeometry(QtCore.QRect(225, 320, 90, 15))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.crr_var_title_gen_var.setFont(font)
        self.crr_var_title_gen_var.setStyleSheet("color: rgb(255, 255, 255);")
        self.crr_var_title_gen_var.setAlignment(QtCore.Qt.AlignCenter)
        self.crr_var_title_gen_var.setObjectName("crr_var_title_gen_var")
        self.input_corr_var_gen_var = QtWidgets.QTextEdit(self.confidence_interval)
        self.input_corr_var_gen_var.setGeometry(QtCore.QRect(240, 345, 60, 30))
        self.input_corr_var_gen_var.setObjectName("input_corr_var_gen_var")
        self.input_corr_var_gen_var.setStyleSheet("background-color: rgb(94, 144, 97);\n"
"color: rgb(255, 255, 255);\n"
"gridline-color: rgb(255, 255, 255);")
        self.answ_gen_var = QtWidgets.QLabel(self.confidence_interval)
        self.answ_gen_var.setGeometry(QtCore.QRect(60, 395, 180, 15))
        self.answ_gen_var.setStyleSheet("color: rgb(255, 255, 255);")
        self.answ_gen_var.setObjectName("answ_gen_var")
        self.calc_gen_mean = QtWidgets.QPushButton(self.confidence_interval)
        self.calc_gen_mean.setGeometry(QtCore.QRect(470, 165, 90, 30))
        self.calc_gen_mean.setObjectName("calc_gen_mean")
        self.calc_gen_mean.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"color: rgb(0, 0, 0);\n"
"gridline-color: rgb(255, 255, 255);")
        self.calc_gen_var = QtWidgets.QPushButton(self.confidence_interval)
        self.calc_gen_var.setGeometry(QtCore.QRect(470, 345, 90, 30))
        self.calc_gen_var.setObjectName("calc_gen_var")
        self.calc_gen_var.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"color: rgb(0, 0, 0);\n"
"gridline-color: rgb(255, 255, 255);")
        self.tabWidget.addTab(self.confidence_interval, "")
        
        self.hypotheses = QtWidgets.QWidget()
        self.hypotheses.setObjectName("hypotheses")
        self.title_gip = QtWidgets.QLabel(self.hypotheses)
        self.title_gip.setGeometry(QtCore.QRect(20, 30, 760, 15))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.title_gip.setFont(font)
        self.title_gip.setStyleSheet("color: rgb(255, 255, 255);")
        self.title_gip.setAlignment(QtCore.Qt.AlignCenter)
        self.title_gip.setObjectName("title_gip")
        self.title_gip_1 = QtWidgets.QLabel(self.hypotheses)
        self.title_gip_1.setGeometry(QtCore.QRect(20, 65, 760, 15))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.title_gip_1.setFont(font)
        self.title_gip_1.setStyleSheet("color: rgb(255, 255, 255);")
        self.title_gip_1.setAlignment(QtCore.Qt.AlignCenter)
        self.title_gip_1.setObjectName("title_gip_1")
        self.n_gen_mean_gip = QtWidgets.QLabel(self.hypotheses)
        self.n_gen_mean_gip.setGeometry(QtCore.QRect(45, 140, 90, 15))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.n_gen_mean_gip.setFont(font)
        self.n_gen_mean_gip.setStyleSheet("color: rgb(255, 255, 255);")
        self.n_gen_mean_gip.setAlignment(QtCore.Qt.AlignCenter)
        self.n_gen_mean_gip.setObjectName("n_gen_mean_gip")
        self.ur_zn_gen_mean_gip = QtWidgets.QLabel(self.hypotheses)
        self.ur_zn_gen_mean_gip.setGeometry(QtCore.QRect(135, 140, 90, 15))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.ur_zn_gen_mean_gip.setFont(font)
        self.ur_zn_gen_mean_gip.setStyleSheet("color: rgb(255, 255, 255);")
        self.ur_zn_gen_mean_gip.setAlignment(QtCore.Qt.AlignCenter)
        self.ur_zn_gen_mean_gip.setObjectName("ur_zn_gen_mean_gip")
        self.sample_mean_gip = QtWidgets.QLabel(self.hypotheses)
        self.sample_mean_gip.setGeometry(QtCore.QRect(225, 140, 90, 15))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.sample_mean_gip.setFont(font)
        self.sample_mean_gip.setStyleSheet("color: rgb(255, 255, 255);")
        self.sample_mean_gip.setAlignment(QtCore.Qt.AlignCenter)
        self.sample_mean_gip.setObjectName("sample_mean_gip")
        self.corr_var_gen_var_gip = QtWidgets.QLabel(self.hypotheses)
        self.corr_var_gen_var_gip.setGeometry(QtCore.QRect(315, 140, 90, 15))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.corr_var_gen_var_gip.setFont(font)
        self.corr_var_gen_var_gip.setStyleSheet("color: rgb(255, 255, 255);")
        self.corr_var_gen_var_gip.setAlignment(QtCore.Qt.AlignCenter)
        self.corr_var_gen_var_gip.setObjectName("corr_var_gen_var_gip")
        
        self.a_gen_var_gip = QtWidgets.QLabel(self.hypotheses)
        self.a_gen_var_gip.setGeometry(QtCore.QRect(405, 140, 90, 15))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.a_gen_var_gip.setFont(font)
        self.a_gen_var_gip.setStyleSheet("color: rgb(255, 255, 255);")
        self.a_gen_var_gip.setAlignment(QtCore.Qt.AlignCenter)
        self.a_gen_var_gip.setObjectName("a_gen_var_gip")
        
        self.gen_var_gip_rb = QtWidgets.QRadioButton(self.hypotheses)
        self.gen_var_gip_rb.setGeometry(QtCore.QRect(60, 100, 160, 20))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.gen_var_gip_rb.setFont(font)
        self.gen_var_gip_rb.setStyleSheet("color: rgb(255, 255, 255);")
        self.gen_var_gip_rb.setObjectName("gen_var_gip_rb")
        self.corr_var_gip_rb = QtWidgets.QRadioButton(self.hypotheses)
        self.corr_var_gip_rb.setGeometry(QtCore.QRect(240, 100, 160, 20))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.corr_var_gip_rb.setFont(font)
        self.corr_var_gip_rb.setStyleSheet("color: rgb(255, 255, 255);")
        self.corr_var_gip_rb.setObjectName("corr_var_gip_rb")
        self.input_n_gip = QtWidgets.QTextEdit(self.hypotheses)
        self.input_n_gip.setGeometry(QtCore.QRect(60, 165, 60, 30))
        self.input_n_gip.setStyleSheet("background-color: rgb(94, 144, 97);\n"
"color: rgb(255, 255, 255);\n"
"gridline-color: rgb(255, 255, 255);")
        self.input_n_gip.setObjectName("input_n_gip")
        self.input_ur_zn_gip = QtWidgets.QTextEdit(self.hypotheses)
        self.input_ur_zn_gip.setGeometry(QtCore.QRect(150, 165, 60, 30))
        self.input_ur_zn_gip.setStyleSheet("background-color: rgb(94, 144, 97);\n"
"color: rgb(255, 255, 255);\n"
"gridline-color: rgb(255, 255, 255);")
        self.input_ur_zn_gip.setObjectName("input_ur_zn_gip")
        self.input_sam_mean_gip = QtWidgets.QTextEdit(self.hypotheses)
        self.input_sam_mean_gip.setGeometry(QtCore.QRect(240, 165, 60, 30))
        self.input_sam_mean_gip.setStyleSheet("background-color: rgb(94, 144, 97);\n"
"color: rgb(255, 255, 255);\n"
"gridline-color: rgb(255, 255, 255);")
        self.input_sam_mean_gip.setObjectName("input_sam_mean_gip")
        self.input_gen_var_corr_var_gip = QtWidgets.QTextEdit(self.hypotheses)
        self.input_gen_var_corr_var_gip.setGeometry(QtCore.QRect(330, 165, 60, 30))
        self.input_gen_var_corr_var_gip.setStyleSheet("background-color: rgb(94, 144, 97);\n"
"color: rgb(255, 255, 255);\n"
"gridline-color: rgb(255, 255, 255);")
        self.input_gen_var_corr_var_gip.setObjectName("input_gen_var_corr_var_gip")
        self.input_a_gip = QtWidgets.QTextEdit(self.hypotheses)
        self.input_a_gip.setGeometry(QtCore.QRect(420, 165, 60, 30))
        self.input_a_gip.setStyleSheet("background-color: rgb(94, 144, 97);\n"
"color: rgb(255, 255, 255);\n"
"gridline-color: rgb(255, 255, 255);")
        self.input_a_gip.setObjectName("input_a_gip")
        
        self.gip_lst = QtWidgets.QComboBox(self.hypotheses)
        self.gip_lst.setGeometry(QtCore.QRect(60, 215, 90, 20))
        self.gip_lst.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"color: rgb(0, 0, 0);")
        self.gip_lst.setObjectName("gip_lst")
        self.gip_lst.addItem("")
        self.gip_lst.addItem("")
        self.gip_lst.addItem("")
        self.calc_but = QtWidgets.QPushButton(self.hypotheses)
        self.calc_but.setGeometry(QtCore.QRect(180, 215, 90, 20))
        self.calc_but.setObjectName("calc_but")
        self.calc_but.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"color: rgb(0, 0, 0);")
        self.gen_mean_answ = QtWidgets.QLabel(self.hypotheses)
        self.gen_mean_answ.setGeometry(QtCore.QRect(60, 255, 450, 15))
        self.gen_mean_answ.setStyleSheet("color: rgb(255, 255, 255);")
        self.gen_mean_answ.setObjectName("gen_mean_answ")
        self.n_gen_mean_gip_2 = QtWidgets.QLabel(self.hypotheses)
        self.n_gen_mean_gip_2.setGeometry(QtCore.QRect(45, 325, 90, 15))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.n_gen_mean_gip_2.setFont(font)
        self.n_gen_mean_gip_2.setStyleSheet("color: rgb(255, 255, 255);")
        self.n_gen_mean_gip_2.setAlignment(QtCore.Qt.AlignCenter)
        self.n_gen_mean_gip_2.setObjectName("n_gen_mean_gip_2")
        self.title_gip_2 = QtWidgets.QLabel(self.hypotheses)
        self.title_gip_2.setGeometry(QtCore.QRect(20, 290, 760, 15))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.title_gip_2.setFont(font)
        self.title_gip_2.setStyleSheet("color: rgb(255, 255, 255);")
        self.title_gip_2.setAlignment(QtCore.Qt.AlignCenter)
        self.title_gip_2.setObjectName("title_gip_2")
        self.sam_mean_1_gip = QtWidgets.QLabel(self.hypotheses)
        self.sam_mean_1_gip.setGeometry(QtCore.QRect(135, 325, 90, 15))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.sam_mean_1_gip.setFont(font)
        self.sam_mean_1_gip.setStyleSheet("color: rgb(255, 255, 255);")
        self.sam_mean_1_gip.setAlignment(QtCore.Qt.AlignCenter)
        self.sam_mean_1_gip.setObjectName("sam_mean_1_gip")
        self.m_gip = QtWidgets.QLabel(self.hypotheses)
        self.m_gip.setGeometry(QtCore.QRect(225, 325, 90, 15))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.m_gip.setFont(font)
        self.m_gip.setStyleSheet("color: rgb(255, 255, 255);")
        self.m_gip.setAlignment(QtCore.Qt.AlignCenter)
        self.m_gip.setObjectName("m_gip")
        self.sam_mean_2_gip = QtWidgets.QLabel(self.hypotheses)
        self.sam_mean_2_gip.setGeometry(QtCore.QRect(315, 325, 90, 15))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.sam_mean_2_gip.setFont(font)
        self.sam_mean_2_gip.setStyleSheet("color: rgb(255, 255, 255);")
        self.sam_mean_2_gip.setAlignment(QtCore.Qt.AlignCenter)
        self.sam_mean_2_gip.setObjectName("sam_mean_2_gip")
        self.var_1_gip = QtWidgets.QLabel(self.hypotheses)
        self.var_1_gip.setGeometry(QtCore.QRect(405, 325, 90, 15))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.var_1_gip.setFont(font)
        self.var_1_gip.setStyleSheet("color: rgb(255, 255, 255);")
        self.var_1_gip.setAlignment(QtCore.Qt.AlignCenter)
        self.var_1_gip.setObjectName("var_1_gip")
        self.var_2_gip = QtWidgets.QLabel(self.hypotheses)
        self.var_2_gip.setGeometry(QtCore.QRect(495, 325, 90, 15))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.var_2_gip.setFont(font)
        self.var_2_gip.setStyleSheet("color: rgb(255, 255, 255);")
        self.var_2_gip.setAlignment(QtCore.Qt.AlignCenter)
        self.var_2_gip.setObjectName("var_2_gip")
        self.ur_zn_gip = QtWidgets.QLabel(self.hypotheses)
        self.ur_zn_gip.setGeometry(QtCore.QRect(585, 325, 90, 15))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.ur_zn_gip.setFont(font)
        self.ur_zn_gip.setStyleSheet("color: rgb(255, 255, 255);")
        self.ur_zn_gip.setAlignment(QtCore.Qt.AlignCenter)
        self.ur_zn_gip.setObjectName("ur_zn_gip")
        self.input_n_gip_2 = QtWidgets.QTextEdit(self.hypotheses)
        self.input_n_gip_2.setGeometry(QtCore.QRect(60, 350, 60, 30))
        self.input_n_gip_2.setStyleSheet("background-color: rgb(94, 144, 97);\n"
"color: rgb(255, 255, 255);\n"
"gridline-color: rgb(255, 255, 255);")
        self.input_n_gip_2.setObjectName("input_n_gip_2")
        self.input_n_gip_3 = QtWidgets.QTextEdit(self.hypotheses)
        self.input_n_gip_3.setGeometry(QtCore.QRect(240, 350, 60, 30))
        self.input_n_gip_3.setStyleSheet("background-color: rgb(94, 144, 97);\n"
"color: rgb(255, 255, 255);\n"
"gridline-color: rgb(255, 255, 255);")
        self.input_n_gip_3.setObjectName("input_n_gip_3")
        self.input_n_gip_4 = QtWidgets.QTextEdit(self.hypotheses)
        self.input_n_gip_4.setGeometry(QtCore.QRect(330, 350, 60, 30))
        self.input_n_gip_4.setStyleSheet("background-color: rgb(94, 144, 97);\n"
"color: rgb(255, 255, 255);\n"
"gridline-color: rgb(255, 255, 255);")
        self.input_n_gip_4.setObjectName("input_n_gip_4")
        self.input_n_gip_5 = QtWidgets.QTextEdit(self.hypotheses)
        self.input_n_gip_5.setGeometry(QtCore.QRect(150, 350, 60, 30))
        self.input_n_gip_5.setStyleSheet("background-color: rgb(94, 144, 97);\n"
"color: rgb(255, 255, 255);\n"
"gridline-color: rgb(255, 255, 255);")
        self.input_n_gip_5.setObjectName("input_n_gip_5")
        self.input_n_gip_6 = QtWidgets.QTextEdit(self.hypotheses)
        self.input_n_gip_6.setGeometry(QtCore.QRect(420, 350, 60, 30))
        self.input_n_gip_6.setStyleSheet("background-color: rgb(94, 144, 97);\n"
"color: rgb(255, 255, 255);\n"
"gridline-color: rgb(255, 255, 255);")
        self.input_n_gip_6.setObjectName("input_n_gip_6")
        self.input_n_gip_7 = QtWidgets.QTextEdit(self.hypotheses)
        self.input_n_gip_7.setGeometry(QtCore.QRect(510, 350, 60, 30))
        self.input_n_gip_7.setStyleSheet("background-color: rgb(94, 144, 97);\n"
"color: rgb(255, 255, 255);\n"
"gridline-color: rgb(255, 255, 255);")
        self.input_n_gip_7.setObjectName("input_n_gip_7")
        self.input_n_gip_8 = QtWidgets.QTextEdit(self.hypotheses)
        self.input_n_gip_8.setGeometry(QtCore.QRect(600, 350, 60, 30))
        self.input_n_gip_8.setStyleSheet("background-color: rgb(94, 144, 97);\n"
"color: rgb(255, 255, 255);\n"
"gridline-color: rgb(255, 255, 255);")
        self.input_n_gip_8.setObjectName("input_n_gip_8")
        self.gip_lst_2 = QtWidgets.QComboBox(self.hypotheses)
        self.gip_lst_2.setGeometry(QtCore.QRect(60, 400, 90, 20))
        self.gip_lst_2.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"color: rgb(0, 0, 0);")
        self.gip_lst_2.setObjectName("gip_lst_2")
        self.gip_lst_2.addItem("")
        self.gip_lst_2.addItem("")
        self.gip_lst_2.addItem("")
        self.calc_but_2 = QtWidgets.QPushButton(self.hypotheses)
        self.calc_but_2.setGeometry(QtCore.QRect(180, 400, 90, 20))
        self.calc_but_2.setObjectName("calc_but_2")
        self.calc_but_2.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"color: rgb(0, 0, 0);")
        self.gen_mean_answ_2 = QtWidgets.QLabel(self.hypotheses)
        self.gen_mean_answ_2.setGeometry(QtCore.QRect(60, 440, 450, 15))
        self.gen_mean_answ_2.setStyleSheet("color: rgb(255, 255, 255);")
        self.gen_mean_answ_2.setObjectName("gen_mean_answ_2")
        self.tabWidget.addTab(self.hypotheses, "")
        
        self.teoria = QtWidgets.QWidget()
        self.teoria.setObjectName("teoria")
        self.scrollArea_2 = QtWidgets.QScrollArea(self.teoria)
        self.scrollArea_2.setGeometry(QtCore.QRect(20, 20, 760, 500))
        self.scrollArea_2.setWidgetResizable(True)
        self.scrollArea_2.setObjectName("scrollArea_2")
        self.scrollAreaWidgetContents_2 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_2.setGeometry(QtCore.QRect(0, 0, 758, 498))
        self.scrollAreaWidgetContents_2.setObjectName("scrollAreaWidgetContents_2")
        self.textBrowser = QtWidgets.QTextBrowser(self.scrollAreaWidgetContents_2)
        self.textBrowser.setGeometry(QtCore.QRect(0, 0, 760, 500))
        self.textBrowser.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.textBrowser.setObjectName("textBrowser")
        self.scrollArea_2.setWidget(self.scrollAreaWidgetContents_2)
        self.tabWidget.addTab(self.teoria, "")
        self.gridLayout.addWidget(self.tabWidget, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        
        
        operations.reaction(self)
        
        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        
        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Калькулятор"))
        self.title.setText(_translate("MainWindow", "Калькулятор для расчета основных характеристик рядов"))
        self.input_words.setText(_translate("MainWindow", "Введите ряд:"))
        self.range.setText(_translate("MainWindow", "Ряд"))
        self.interval_range.setText(_translate("MainWindow", "Интервальный ряд"))
        self.discrete_variation_series_interval.setText(_translate("MainWindow", "Дискретный вариационный ряд"))
        self.plot_empirical_distribution_function_interval.setText(_translate("MainWindow", "График эмпирической функции распределения"))
        self.mean_interval.setText(_translate("MainWindow", "Медиана"))
        self.sample_standard_deviation_interval.setText(_translate("MainWindow", "Выборочное среднеквадратическое отклонение"))
        self.relative_frequency_distribution_series_interval.setText(_translate("MainWindow", "Ряд распределения относительных частот"))
        self.sample_mean_interval.setText(_translate("MainWindow", "Выборочная средняя"))
        self.correct_variance_interval.setText(_translate("MainWindow", "Исправленная дисперсия"))
        self.var_k_interval.setText(_translate("MainWindow", "Коэф. вариаций"))
        self.moda_interval.setText(_translate("MainWindow", "Мода"))
        self.dispersion_interval.setText(_translate("MainWindow", "Дисперсия"))
        self.empirical_distribution_function_interval.setText(_translate("MainWindow", "Эмпирическая функция распределения"))
        self.frequency_polygon_interval.setText(_translate("MainWindow", "Полигон частот"))
        self.discrete_variation_series.setText(_translate("MainWindow", "Дискретный вариационный ряд"))
        self.correct_variance.setText(_translate("MainWindow", "Исправленная дисперсия"))
        self.var_k.setText(_translate("MainWindow", "Коэф. вариаций"))
        self.moda.setText(_translate("MainWindow", "Мода"))
        self.empirical_distribution_function.setText(_translate("MainWindow", "Эмпирическая функция распределения"))
        self.variance.setText(_translate("MainWindow", "Дисперсия"))
        self.frequency_polygon.setText(_translate("MainWindow", "Полигон частот"))
        self.plot_empirical_distribution_function.setText(_translate("MainWindow", "График эмпирической функции распределения"))
        self.mean.setText(_translate("MainWindow", "Медиана"))
        self.relative_frequency_distribution_series.setText(_translate("MainWindow", "Ряд распределения относительных частот"))
        self.sample_standard_deviation.setText(_translate("MainWindow", "Выборочное среднеквадратическое отклонение"))
        self.sample_mean.setText(_translate("MainWindow", "Выборочная средняя"))
        self.calc_butt.setText(_translate("MainWindow", "➥"))
        try:
                self.title_dis.setText(_translate("MainWindow", "Результат..."))
        except Exception:
                pass
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.range_charact), _translate("MainWindow", "Ряды и их характеристики"))
        
        self.title_conf_interv.setText(_translate("MainWindow", "Калькулятор для доверительных интервалов"))
        self.title_gen_mean.setText(_translate("MainWindow", "Доверительный интервал для оценки генеральной средней"))
        self.otkl_rbut.setText(_translate("MainWindow", "Стандартное отклонение"))
        self.corr_var_rbut.setText(_translate("MainWindow", "Исправленная дисперсия"))
        self.input_conf_gen_mean.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Ubuntu\'; font-size:10pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.conf_title.setText(_translate("MainWindow", "Надежность"))
        self.n_title.setText(_translate("MainWindow", "n"))
        self.cor_var_otkl_title.setText(_translate("MainWindow", "Ст.отк./исп.дисп."))
        self.v_mean.setText(_translate("MainWindow", "Выб. средняя"))
        self.ensw_gen_mean.setText(_translate("MainWindow", "Ответ:"))
        self.cof_gen_var_otkl_title.setText(_translate("MainWindow", "Доверительный интервал для оценки генеральной дисперсии и стандартного отклонения"))
        self.gen_var_rbut.setText(_translate("MainWindow", "Генеральная дисперсия"))
        self.stotkl_rbut_gen_var.setText(_translate("MainWindow", "Стандартное отклонение"))
        self.conf_title_gen_var.setText(_translate("MainWindow", "Надежность"))
        self.n_title_gen_var.setText(_translate("MainWindow", "n"))
        self.crr_var_title_gen_var.setText(_translate("MainWindow", "Исп. дисп."))
        self.answ_gen_var.setText(_translate("MainWindow", "Ответ:"))
        self.calc_gen_mean.setText(_translate("MainWindow", "Рассчитать"))
        self.calc_gen_var.setText(_translate("MainWindow", "Рассчитать"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.confidence_interval), _translate("MainWindow", "Доверительные интервалы"))
        self.title_gip.setText(_translate("MainWindow", "Калькулятор для проверки статистических гипотез"))
        self.title_gip_1.setText(_translate("MainWindow", "Гипотеза о генеральной средней нормального распределения"))
        self.n_gen_mean_gip.setText(_translate("MainWindow", "n"))
        self.ur_zn_gen_mean_gip.setText(_translate("MainWindow", "Ур. знач."))
        self.sample_mean_gip.setText(_translate("MainWindow", "Выб. ср."))
        self.corr_var_gen_var_gip.setText(_translate("MainWindow", "г.д./и.д."))
        self.a_gen_var_gip.setText(_translate("MainWindow", "a₀"))
        self.gen_var_gip_rb.setText(_translate("MainWindow", "Генеральная дисперсия"))
        self.corr_var_gip_rb.setText(_translate("MainWindow", "Исправленная дисперсия"))
        self.gip_lst.setItemText(0, _translate("MainWindow", "H1: a < a₀"))
        self.gip_lst.setItemText(1, _translate("MainWindow", "H1: a > a₀"))
        self.gip_lst.setItemText(2, _translate("MainWindow", "H1: a ≠ a₀"))
        self.calc_but.setText(_translate("MainWindow", "Рассчитать"))
        self.gen_mean_answ.setText(_translate("MainWindow", "Ответ: "))
        self.n_gen_mean_gip_2.setText(_translate("MainWindow", "n"))
        self.title_gip_2.setText(_translate("MainWindow", "Гипотеза о равенстве генеральных средних двух распределений"))
        self.sam_mean_1_gip.setText(_translate("MainWindow", "Выб.ср.₁"))
        self.m_gip.setText(_translate("MainWindow", "m"))
        self.sam_mean_2_gip.setText(_translate("MainWindow", "Выб.ср.₂"))
        self.var_1_gip.setText(_translate("MainWindow", "Дисп.₁"))
        self.var_2_gip.setText(_translate("MainWindow", "Дисп.₂"))
        self.ur_zn_gip.setText(_translate("MainWindow", "Ур.знач."))
        self.gip_lst_2.setItemText(0, _translate("MainWindow", "H1: Ẋв₁ < Ẋв₂ "))
        self.gip_lst_2.setItemText(1, _translate("MainWindow", "H1: Ẋв₁ > Ẋв₂ "))
        self.gip_lst_2.setItemText(2, _translate("MainWindow", "H1: Ẋв₁ ≠ Ẋв₂ "))
        self.calc_but_2.setText(_translate("MainWindow", "Рассчитать"))
        self.gen_mean_answ_2.setText(_translate("MainWindow", "Ответ: "))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.hypotheses), _translate("MainWindow", "Гипотезы"))
        
        self.textBrowser.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Ubuntu\'; font-size:10pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; line-height:100%; background-color:transparent;\"><span style=\" font-size:14pt; font-weight:600; color:#00557f; background-color:transparent;\">Теория</span></p>\n"
"<p align=\"center\" style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; line-height:100%; background-color:transparent;\"><span style=\" font-size:12pt; font-weight:600; color:#49946e; background-color:transparent;\">Ряды</span></p>\n"
"<p align=\"center\" style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; line-height:100%; background-color:transparent;\"><span style=\" font-size:12pt; font-weight:600; color:#49946e; background-color:transparent;\">Доверительные интервалы</span></p>\n"
"<p align=\"center\" style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; line-height:100%; background-color:transparent;\"><span style=\" font-size:12pt; font-weight:600; color:#49946e; background-color:transparent;\">Гипотезы</span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; line-height:100%; background-color:transparent;\"><span style=\" background-color:transparent;\">Основной метод математической статистики — </span><span style=\" font-weight:600; background-color:transparent;\">выборочный метод.</span><span style=\" background-color:transparent;\"> И в результате анализа этих данных появляются мысли, которые оформляются в статистические гипотезы. Но не все гипотезы можно назвать статистическими.</span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; line-height:100%; background-color:transparent;\"><span style=\" font-weight:600; background-color:transparent;\">Статистической</span><span style=\" background-color:transparent;\"> </span><span style=\" font-weight:600; background-color:transparent;\">называют гипотезу</span><span style=\" background-color:transparent;\"> о законе распределения совокупности или о числовых параметрах известных распределений. </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; line-height:100%; background-color:transparent;\"><span style=\" background-color:transparent;\">Например, у нас имеется выборка с данными о росте студентов. И мы выдвигаем гипотезу, что средний рост студентов во всей ГС составляет 188.5 см. Эта гипотеза будет называться нулевой, ее обозначают как H</span><span style=\" background-color:transparent; vertical-align:sub;\">0</span><span style=\" background-color:transparent;\">. И в противовес ей выдвигается альтернативная гипотеза, обозначается как H</span><span style=\" background-color:transparent; vertical-align:sub;\">1</span><span style=\" background-color:transparent;\">, что средний рост студентов во всей ГС меньше заявленного выше значения.</span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; line-height:100%; background-color:transparent;\"><span style=\" background-color:transparent;\">Так у нас есть две гипотезы: нулевая и альтернативная.</span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; line-height:100%; background-color:transparent;\"><span style=\" background-color:transparent;\">Нулевая гипотеза выдвигается на основании выборочных данных, поэтому она может оказаться, как верной, так и неверной. Более того, мы не можем гарантировать ее истинность даже после статистической проверки. </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; line-height:100%; background-color:transparent;\"><span style=\" background-color:transparent;\">Проверка осуществляется с помощью</span><span style=\" font-weight:600; background-color:transparent;\"> статистических критериев</span><span style=\" background-color:transparent;\"> — это специальные случайные величины, которые принимают различные действительные значения. В каждом типе задач применяются свои критерии.</span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; line-height:100%; background-color:transparent;\"><span style=\" background-color:transparent;\">В результате проверки нулевая гипотеза либо принимается, либо отвергается в пользу альтернативной. При этом есть риск совершить ошибку:</span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; line-height:100%; background-color:transparent;\"><span style=\" font-weight:600; background-color:transparent;\">Ошибка 1-го рода</span><span style=\" background-color:transparent;\"> состоит в том, что мы отвергаем верную гипотезу. Вероятность допустить такую ошибку называется уровнем значимости, обозначается 𝛼 (альфа).</span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; line-height:100%; background-color:transparent;\"><span style=\" font-weight:600; background-color:transparent;\">Ошибка 2-го рода</span><span style=\" background-color:transparent;\"> состоит в том, что мы принимаем неверную гипотезу. Вероятность совершить такую ошибку обозначают как 𝛽 (бета). Значение 1 — 𝛽 называют мощностью критерия — это вероятность отвержения неправильной гипотезы.</span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; line-height:100%; background-color:transparent;\"><span style=\" background-color:transparent;\">При уменьшении вероятности 𝛼 — отвергнуть правильную гипотезу, растет вероятность 𝛽 — принять неверную гипотезу. Поэтому значения 𝛼 и 𝛽 подбираются в зависимости от задачи: например, в случае с дозировкой лекарств лучше отвергнуть верную гипотезу о необходимой дозировке, чем принять неверную дозировку за верную.</span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; line-height:100%; background-color:transparent;\"><span style=\" font-weight:600; background-color:transparent;\">Процесс проверки статистической гипотезы:</span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; line-height:100%; background-color:transparent;\"><span style=\" background-color:transparent;\">1) Обработка выборочных данных и выдвижение основной H</span><span style=\" background-color:transparent; vertical-align:sub;\">0</span><span style=\" background-color:transparent;\"> и конкурирующей H</span><span style=\" background-color:transparent; vertical-align:sub;\">1</span><span style=\" background-color:transparent;\"> гипотез.</span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; line-height:100%; background-color:transparent;\"><span style=\" background-color:transparent;\">2) Выбор статистического критерия K.</span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; line-height:100%; background-color:transparent;\"><span style=\" background-color:transparent;\">3) Выбор уровня значимости.</span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; line-height:100%; background-color:transparent;\"><span style=\" background-color:transparent;\">4) Нахождение критического значения — значение случайной величины K, зависящее от выбранного уровня значимости a и в от других параметров (зависит от типа задачи).</span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; line-height:100%; background-color:transparent;\"><span style=\" background-color:transparent;\">Критическое значение определяет критическую область: левостороняя, правосторонняя или </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; line-height:100%; background-color:transparent;\"><span style=\" background-color:transparent;\">двусторонняя. </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; line-height:100%; background-color:transparent;\"><img src=\"file:///tmp/lu2447t5305g.tmp/lu2447t530bf_tmp_fcebbca7ec0190cc.gif\" width=\"281\" height=\"147\" style=\"float: left;\" /> <br /></p>\n"
"<p style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; line-height:100%; background-color:transparent;\"><br /></p>\n"
"<p style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; line-height:100%; background-color:transparent;\"><br /></p>\n"
"<p style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; line-height:100%; background-color:transparent;\"><br /><br /><span style=\" background-color:transparent;\">5) Рассчитываем наблюдаемое значение критерия на основании выборочных данных.</span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; line-height:100%; background-color:transparent;\"><span style=\" background-color:transparent;\">6) Делаем выводы: если наблюдаемое значение в критическую область не попадает, то гипотеза на уровне значимости а принимается, иначе — отвергается.</span></p>\n"
"<p align=\"center\" style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; line-height:100%; background-color:transparent;\"><span style=\" font-weight:600; font-style:italic; background-color:transparent;\">Рассмотрим гипотезы, которые считает наш калькулятор.</span></p>\n"
"<p align=\"center\" style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; line-height:100%; background-color:transparent;\"><span style=\" font-weight:600; color:#316349; background-color:transparent;\">Гипотеза о генеральной средней нормального распределения.</span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; line-height:100%; background-color:transparent;\"><span style=\" background-color:transparent;\">Предполагается, что генеральная средняя а нормального распределения равна некоторому значению а</span><span style=\" background-color:transparent; vertical-align:sub;\">0</span><span style=\" background-color:transparent;\">. Это нулевая гипотеза. На основании этой гипотезы мы можем выдвинуть 3 гипотезы: что генеральная средняя на самом деле меньше (левосторонняя область), больше (правосторонняя область) или не равна (двусторонняя область) значению а</span><span style=\" background-color:transparent; vertical-align:sub;\">0</span><span style=\" background-color:transparent;\">.</span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; line-height:100%; background-color:transparent;\"><span style=\" background-color:transparent;\">Есть два случая:</span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; line-height:100%; background-color:transparent;\"><span style=\" font-weight:600; background-color:transparent;\">1) Генеральная дисперсия известна.</span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; line-height:100%; background-color:transparent;\"><span style=\" background-color:transparent;\">Тогда критерий для такой задачи:</span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; line-height:100%; background-color:transparent;\"><img src=\"file:///tmp/lu2447t5305g.tmp/lu2447t530ck_tmp_63eb4b4fbd82c543.gif\" width=\"111\" height=\"45\" style=\"float: left;\" /> </p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; line-height:100%; background-color:transparent;\"><br /></p>\n"
"<p style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; line-height:100%; background-color:transparent;\"><span style=\" background-color:transparent;\">Критическое значение находим из соотношения</span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; line-height:100%; background-color:transparent;\"><img src=\"file:///tmp/lu2447t5305g.tmp/lu2447t530ck_tmp_3355c8129a77f37b.gif\" width=\"108\" height=\"41\" style=\"float: left;\" /> <br /><br /></p>\n"
"<p style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; line-height:100%; background-color:transparent;\"><span style=\" background-color:transparent;\">для односторонней области и </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; line-height:100%; background-color:transparent;\"><img src=\"file:///tmp/lu2447t5305g.tmp/lu2447t530ck_tmp_a27f6b4c3da4b14e.gif\" width=\"99\" height=\"41\" style=\"float: left;\" /> <br /></p>\n"
"<p style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; line-height:100%; background-color:transparent;\"><span style=\" background-color:transparent;\">для двусторонней, где Ф — функция Лапласа.</span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; line-height:100%; background-color:transparent;\"><span style=\" background-color:transparent;\">Далее проверяем, где находится наш наблюдаемый признак относительно критического значения.</span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; line-height:100%; background-color:transparent;\"><br /><span style=\" font-weight:600; background-color:transparent;\">2) Генеральная дисперсия неизвестна.</span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; line-height:100%; background-color:transparent;\"><span style=\" background-color:transparent;\">В этом случае ориентируемся на исправленную выборочную дисперсию.</span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; line-height:100%; background-color:transparent;\"><span style=\" background-color:transparent;\">Критерий:</span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; line-height:100%; background-color:transparent;\"><img src=\"file:///tmp/lu2447t5305g.tmp/lu2447t530ck_tmp_c7afc75475976da6.gif\" width=\"108\" height=\"45\" style=\"float: left;\" /> <br /></p>\n"
"<p style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; line-height:100%; background-color:transparent;\"><span style=\" background-color:transparent;\">Критическое значение:</span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; line-height:100%; background-color:transparent;\"><span style=\" background-color:transparent;\">t(𝛼, n-1) — двусторонняя область</span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; line-height:100%; background-color:transparent;\"><span style=\" background-color:transparent;\">t(𝛼 , 2n-1) — одностронняя, значение смотрим по таблице критических точек распределения Стьюдента.</span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; line-height:100%; background-color:transparent;\"><span style=\" background-color:transparent;\">Остальное то же самое.</span></p>\n"
"<p align=\"center\" style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; line-height:100%; background-color:transparent;\"><span style=\" font-weight:600; color:#387153; background-color:transparent;\">Гипотеза о равенстве генеральных средних двух распределений.</span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; line-height:100%; background-color:transparent;\"><span style=\" background-color:transparent;\">Имеется 4 случая, но рассмотрим лишь тот, что вычисляется в калькуляторе.</span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; line-height:100%; background-color:transparent;\"><span style=\" background-color:transparent;\">Выборки независимы, генеральные совокупности распределены нормально и известны их дисперсии.</span><br /><span style=\" background-color:transparent;\">Критерий:</span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; line-height:100%; background-color:transparent;\"><img src=\"file:///tmp/lu2447t5305g.tmp/lu2447t530dl_tmp_d78ef5571e5bea35.gif\" width=\"103\" height=\"71\" style=\"float: left;\" /> <br /></p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; line-height:100%; background-color:transparent;\"><br /></p>\n"
"<p style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; line-height:100%; background-color:transparent;\"><span style=\" background-color:transparent;\">Критическое значение:</span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; line-height:100%; background-color:transparent;\"><span style=\" background-color:transparent;\">односторонняя область,</span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; line-height:100%; background-color:transparent;\"><img src=\"file:///tmp/lu2447t5305g.tmp/lu2447t530dz_tmp_ac6fbc98b7996939.gif\" width=\"107\" height=\"41\" style=\"float: left;\" /> <br /></p>\n"
"<p style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; line-height:100%; background-color:transparent;\"><span style=\" background-color:transparent;\">двусторонняя область.</span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; line-height:100%; background-color:transparent;\"><img src=\"file:///tmp/lu2447t5305g.tmp/lu2447t530dz_tmp_8f4ae831828ed944.gif\" width=\"99\" height=\"41\" style=\"float: left;\" /> <br /></p>\n"
"<p style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; line-height:100%; background-color:transparent;\"><span style=\" background-color:transparent;\">Про ввод данных: обратите внимание, что s^2 это исправленная дисперсия, когда просто s — исправленное стандартное отклонение. Ввести требуется именно исправленную дисперсию. То же относится и к ген. дисперсии</span><br /></p></body></html>"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.teoria), _translate("MainWindow", "Теория"))
        
        

